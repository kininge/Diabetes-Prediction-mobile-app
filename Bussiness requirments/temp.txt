Animation<double> fadeAnimation;
  AnimationController fadeController;
  Animation<double> scaleAnimation;
  AnimationController scaleController;

  initState()
  {
    super.initState();

    fadeController= AnimationController
    (
      duration: Duration(seconds: 1),
      vsync: this,
    )..addStatusListener((status) 
    {
      if(status== AnimationStatus.completed)
      {
        Timer(Duration(seconds: 2), (){scaleController.forward();});
      }
    });

    fadeAnimation= Tween(begin: 0.0, end: 1.0)
    .animate
    (
      CurvedAnimation
      (
        parent: fadeController, 
        curve: Curves.easeIn,
      ),
    );

    scaleController= AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    )..addStatusListener((status) 
    {
      if(status== AnimationStatus.completed)
      {
        Navigator.push(context, PageTransition(child: HomePage(), type: PageTransitionType.fade));
      }
    });

    scaleAnimation= Tween(begin: 1.0, end: 2000.0).animate
    (
      CurvedAnimation
      (
        parent: scaleController, 
        curve: Curves.easeInOut,
      ),
    );

    Timer(Duration(seconds: 2), (){fadeController.forward();});
  }


Stack
      (
        children: <Widget>
        [
          Container
          (
            margin: EdgeInsets.only(top: screenWidth* 0.5),
            decoration: BoxDecoration
            (
              color: Color.fromRGBO(43, 174, 102, 1.0),
            ),
            child: Center
            (
              child: Column
              (
                children: <Widget>
                [
                  logo(screenWidth),
                  title(screenWidth),
                ],
              ),
            ),
          ),
          AnimatedBuilder
          (
            animation: scaleAnimation,
            child: Container
            (
              height: 2000.0,
              width: scaleAnimation.value,
              decoration: BoxDecoration
              (
                color: Color.fromRGBO(209, 209, 209, 1.0),
              ),
            ),
            builder: (BuildContext context, Widget child)
            {
              return Transform.scale(
                scale: scaleAnimation.value,
                child: child,
              );
            },
          ),
        ],
      )
      */

  Widget logo(double screenWidth)
  {
    return AnimatedBuilder
    (
      animation: fadeAnimation,
      child: Container
      (
        margin: EdgeInsets.only(right: screenWidth* 0.2, left: screenWidth* 0.2),
        child: Image.asset('assets/images/diabetesPrediction.png'),
      ),
      builder: (BuildContext context, Widget child) 
      {
        return FadeTransition
        (
          opacity: fadeAnimation,
          child: child
        );
      },
    );
  }

  Widget title(double screenWidth)
  {
    return AnimatedBuilder
    (
      animation: fadeAnimation,
      child: Container
      (
        margin: EdgeInsets.only(right: screenWidth* 0.1, left: screenWidth* 0.1),
        child: Text
        (
          'Diabetes Prediction',
          style: TextStyle
          (
            color: Colors.black,
            fontSize: 30.0,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      builder: (BuildContext context, Widget child)
      {
        return FadeTransition
        (
          opacity: fadeAnimation,
          child: child,
        );
      },
    );
  }

AnimationController greenContainerSizeController;
  Animation<double> greenContainerSizesAnimation;
  AnimationController grayContainerSizeController;
  Animation<double> grayContainerSizesAnimation;

  initState()
  {
    super.initState();

    greenContainerSizeController= AnimationController
    (
      vsync: this,
      duration: Duration(seconds: 1),
    );

    greenContainerSizesAnimation= Tween(begin: 00.0, end: -40.0).animate
    (
      CurvedAnimation
      (
        parent: greenContainerSizeController, 
        curve: Curves.easeIn,
      ),
    );

    grayContainerSizeController= AnimationController
    (
      vsync: this,
      duration: Duration(seconds: 1),
    );

    grayContainerSizesAnimation= Tween(begin: 0.0, end: 60.0).animate
    (
      CurvedAnimation
      (
        parent: grayContainerSizeController, 
        curve: Curves.easeIn,
      ),
    );

    triggerAnimation(2, greenContainerSizeController, true);
    triggerAnimation(2, grayContainerSizeController, true);
  }

  //Control the trigger and direction of animation
  triggerAnimation(int delay, AnimationController controller, bool direction)
  {
    Duration waitFor= Duration(seconds: delay);
    Timer
    (
      waitFor, 
      ()
      {
        if(direction)
        {
          controller.forward();
        }
        else
        {
          controller.reverse();
        }
      }
    );
  }